AWSTemplateFormatVersion: '2010-09-09'
Description: 'EKS - Node Group & Security Groups'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  EksClusterName:
    Type: String
    Description: The created EKS Cluster resource name.

  EksClusterSecurityGroupIdStackName:
    Type: String
    Description: The stack name of CloudFormation that created EKS Cluster Security Group resource id.
  
  VpcIdStackName:
    Type: String
    Description: The stack name of CloudFormation that created VPC resource id.

  VpcSubnetId1StackName:
    Type: String
    Description: The stack name of CloudFormation that created VPC Subnet 1 resource id.

  VpcSubnetId2StackName:
    Type: String
    Description: The stack name of CloudFormation that created VPC Subnet 2 resource id.

Resources:

  # =========== Control Plane ingress & egress security group =========== #

  ControlPlaneIngressFromWorkerNodeHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic to Cluster API server
      GroupId: !ImportValue
        Fn::Sub: '${EksClusterSecurityGroupIdStackName}'
      SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ControlPlaneEgressToWorkerNodeKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing Kubelet API traffic (TCP/10250) to worker node Kubelet API (TCP/10250)
      GroupId: !ImportValue
        Fn::Sub: '${EksClusterSecurityGroupIdStackName}'
      DestinationSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  ControlPlaneEgressToWorkerNodeHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/443) to worker node (for pods running extension API servers)
      GroupId: !ImportValue
        Fn::Sub: '${EksClusterSecurityGroupIdStackName}'
      DestinationSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # =========== Worker Node security group =========== #

  WorkerNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !ImportValue
        Fn::Sub: '${VpcIdStackName}'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-worker-securitygroup'
        - Key: !Sub 'kubernetes.io/cluster/${EksClusterName}'
          Value: 'owned'

  WorkerIngressFromWorkerNode:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: '-1'

  WorkerIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId: !ImportValue
        Fn::Sub: '${EksClusterSecurityGroupIdStackName}'
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  WorkerIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming HTTPS traffic (TCP/443) from control plane
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId: !ImportValue
        Fn::Sub: '${EksClusterSecurityGroupIdStackName}'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  # Worker Node Role
  WorkerNodeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-worker-role'
      Description: Worker Node Instance Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
        - 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy'

  # Worker node group
  # If the node is deployed to a private subnet, 
  # then the subnet must have a route to a NAT gateway that has a public IP address assigned to it.
  # https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html
  WorkerNode:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Sub '${EksClusterName}'
      NodegroupName: !Sub '${AWS::StackName}-worker'
      NodeRole: !GetAtt WorkerNodeRole.Arn
      Subnets:
        - Fn::ImportValue: !Sub '${VpcSubnetId1StackName}'
        - Fn::ImportValue: !Sub '${VpcSubnetId2StackName}'
      ScalingConfig:
        DesiredSize: 1
        MaxSize: 1
        MinSize: 1
      InstanceTypes:
        # - 't2.xlarge' # 4 vCPUs, 16 GiB memory, costs $0.1856/hour for Linux, EBS Only storage, Moderate network performance
        - 't3.xlarge' # 4 vCPUs, 16 GiB memory, costs $0.1664/hour for Linux, EBS Only storage, Up to 5 Gigabit network performance
      Tags:
        Name: Worker node group