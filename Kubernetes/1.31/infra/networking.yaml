AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 - Internet Gateway and Route Table And Nat Gateway'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcIdStackName:
    Type: String
    Description: The stack name of CloudFormation that created VPC resource id.

  VpcPublicSubnetId1StackName:
    Type: String
    Description: The stack name of CloudFormation that created VPC - Public Subnet 1 resource id.

  VpcPrivateSubnetId1StackName:
    Type: String
    Description: The stack name of CloudFormation that created VPC - Private Subnet 1 resource id.
 
Resources:
  # InternetGateway: allows resources in your VPC to connect to the internet 
  #  as well as resources in the VPC to connect to the internet.
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  # VPCGatewayAttachment: is used to attach an Internet Gateway or a Virtual Private Gateway to a VPC,
  #  enabling communication between the VPC and the internet or other networks  
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !ImportValue
        Fn::Sub: '${VpcIdStackName}'

  ########## Public network - Begin ##########
  ElasticIP:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-elasticip1'

  # PublicNatGateway: is used to enable instances in a private subnet 1 to connect to the internet
  PublicNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: "public"
      AllocationId: !GetAtt 'ElasticIP.AllocationId'
      SubnetId: !ImportValue
        Fn::Sub: '${VpcPublicSubnetId1StackName}'
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-natgw-public'
    DependsOn:
    - VPCGatewayAttachment

  # PublicRouteTable: is used to define the routes for the public network
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        Fn::Sub: '${VpcIdStackName}'
      Tags:
      - Key: Name
        Value:  !Sub '${AWS::StackName}-routetable-public'
      - Key: Network
        Value: Public Route Table for public subnets

  # PublicNatGwRoute: is used to define the routes for the public subnets
  PublicNatGwRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1ToRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !ImportValue
        Fn::Sub: '${VpcPublicSubnetId1StackName}'
      RouteTableId: !Ref PublicRouteTable

  # ---------- Public network - End ---------- #

  ########## Private network - End ##########
  # # PrivateNatGateway: is used to enable instances in a private subnet 1 to connect to the internet
  # PrivateNatGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     ConnectivityType: "private"
  #     SubnetId: !ImportValue
  #       Fn::Sub: '${VpcPrivateSubnetId1StackName}'
  #     Tags:
  #     - Key: Name
  #       Value: !Sub '${AWS::StackName}-natgw-private'
  #   DependsOn:
  #   - VPCGatewayAttachment

  # PrivateRouteTable: is used to define the routes for the private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        Fn::Sub: '${VpcIdStackName}'
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-routetable-private'
      - Key: Network
        Value: private Route Table for private Subnets
 
  PrivateNatGwRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicNatGateway # If the node is deployed to a private subnet, 
                                          # then the subnet must have a route to a NAT gateway that has a public IP address assigned to it.
                                          # https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html
    DependsOn:
    - VPCGatewayAttachment
    - PublicNatGateway

  PrivateSubnet1ToRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !ImportValue
        Fn::Sub: '${VpcPrivateSubnetId1StackName}'
      RouteTableId: !Ref PrivateRouteTable

  # ---------- Private network - End ---------- #